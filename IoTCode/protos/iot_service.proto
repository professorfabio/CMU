syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.iotservice";
option java_outer_classname = "IoTServiceProto";
option objc_class_prefix = "TEMP";

package iot_service;

// The temperature service definition.
service IoTService {
  // Responds with a temperature measurement
  rpc SayTemperature (TemperatureRequest) returns (TemperatureReply) {}
  
  // Send a command to the led
  rpc BlinkLed (LedRequest) returns (LedReply) {}
  
  // Connects devices under a serial key to the service
  rpc RegisterDevices (DeviceRequest) returns (DeviceReply) {}
  
  // Authenticates or creates a user and returns a session
  rpc Login (LoginRequest) returns (LoginReply) {}
  
  // Authorize a user to access devices under a serial key
  rpc RegisterKey (KeyRequest) returns (KeyReply) {}
  
  // Query Identity Provider for authorization status of a session
  rpc Authorize (KeyRequest) returns (AuthorizeReply) {}
}

// The request message containing the user's name.
message TemperatureRequest {
  string sensorName = 1;
}

// The response message containing the greetings
message TemperatureReply {
  string temperature = 1;
}

message LedRequest {
  uint32 state = 1;
  string ledname = 2;
  uint32 session = 3;
}

message LedReply {
  map<string, uint32> ledstate = 1;
}

message DeviceRequest {
  string serial_key = 1;
  repeated string device_keys = 2;
}

message DeviceReply {
}

message LoginRequest {
  string user = 1;
  string password = 2;
}

message LoginReply {
  uint32 session = 1;
}

message KeyRequest {
  uint32 session = 1;
  string serial_key = 2;
}

message KeyReply {
  repeated string device_keys = 1;
}

message AuthorizeReply {
  bool authorized = 1;
}
